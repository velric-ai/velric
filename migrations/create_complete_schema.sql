-- migrations/create_complete_schema.sql
-- Complete database schema for Velric application including missions and user management

-- Enable UUID extension if not already enabled
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

-- Create users table
CREATE TABLE IF NOT EXISTS users (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    email VARCHAR(255) UNIQUE NOT NULL,
    name VARCHAR(255),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Create user_surveys table to store user survey responses
CREATE TABLE IF NOT EXISTS user_surveys (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    experience_level VARCHAR(50), -- 'beginner', 'intermediate', 'advanced'
    programming_languages TEXT[], -- Array of programming languages
    interests TEXT[], -- Array of interest areas
    career_goals TEXT[], -- Array of career goals
    industry_preferences TEXT[], -- Array of preferred industries
    availability_hours_per_week INTEGER, -- Hours available per week
    preferred_project_types TEXT[], -- Array of preferred project types
    resume_text TEXT, -- Full text of resume for analysis
    completed_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Create mission_templates table (the catalog of available missions)
CREATE TABLE IF NOT EXISTS mission_templates (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    title VARCHAR(255) NOT NULL,
    description TEXT NOT NULL,
    skills TEXT[] NOT NULL, -- Array of required skills
    industries TEXT[] NOT NULL, -- Array of applicable industries
    difficulty VARCHAR(50) NOT NULL CHECK (difficulty IN ('Beginner', 'Intermediate', 'Advanced')),
    time_estimate VARCHAR(50), -- e.g., '3-5 hours'
    category VARCHAR(100), -- e.g., 'AI/ML', 'Web Development'
    tags TEXT[], -- Array of tags
    time_limit VARCHAR(50), -- e.g., '7 days'
    details JSONB, -- Detailed mission information (overview, requirements, technologies, learningOutcomes)
    is_generated BOOLEAN DEFAULT FALSE, -- True if generated by AI, false if manually created
    generated_for_user_id UUID REFERENCES users(id) ON DELETE SET NULL, -- If generated, which user it was for
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Create user_missions table (tracks user's relationship with missions)
CREATE TABLE IF NOT EXISTS user_missions (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    mission_id UUID NOT NULL REFERENCES mission_templates(id) ON DELETE CASCADE,
    status VARCHAR(50) NOT NULL DEFAULT 'suggested' CHECK (status IN ('suggested', 'starred', 'in_progress', 'completed', 'submitted')),
    started_at TIMESTAMP WITH TIME ZONE,
    submitted_at TIMESTAMP WITH TIME ZONE,
    completed_at TIMESTAMP WITH TIME ZONE,
    submission_data JSONB, -- Store submission details (code links, descriptions, etc.)
    feedback TEXT, -- Feedback on the submission
    grade INTEGER CHECK (grade >= 0 AND grade <= 100), -- Grade out of 100
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    UNIQUE(user_id, mission_id) -- Each user can only have one relationship per mission
);

-- Create company_projects table (real projects from companies to base missions on)
CREATE TABLE IF NOT EXISTS company_projects (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    company_name VARCHAR(255) NOT NULL,
    project_title VARCHAR(255) NOT NULL,
    project_description TEXT NOT NULL,
    technologies_used TEXT[] NOT NULL,
    industry VARCHAR(100) NOT NULL,
    difficulty_level VARCHAR(50) NOT NULL CHECK (difficulty_level IN ('Beginner', 'Intermediate', 'Advanced')),
    project_type VARCHAR(100), -- e.g., 'Full-Stack', 'Backend', 'Frontend', 'Data Science'
    estimated_time VARCHAR(50), -- e.g., '2-4 hours'
    learning_objectives TEXT[], -- What users will learn
    business_context TEXT, -- Real business problem this solves
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Copy existing projects table from previous migration
CREATE TABLE IF NOT EXISTS projects (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    title VARCHAR(255) NOT NULL,
    description TEXT NOT NULL,
    user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    mission_id UUID REFERENCES mission_templates(id) ON DELETE SET NULL,
    status VARCHAR(50) NOT NULL DEFAULT 'draft' CHECK (status IN ('draft', 'in_progress', 'completed', 'published')),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Copy existing related tables from previous migration
CREATE TABLE IF NOT EXISTS industry_tags (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    name VARCHAR(100) NOT NULL UNIQUE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

CREATE TABLE IF NOT EXISTS project_industry_tags (
    project_id UUID NOT NULL REFERENCES projects(id) ON DELETE CASCADE,
    industry_tag_id UUID NOT NULL REFERENCES industry_tags(id) ON DELETE CASCADE,
    PRIMARY KEY (project_id, industry_tag_id)
);

CREATE TABLE IF NOT EXISTS target_roles (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    name VARCHAR(100) NOT NULL UNIQUE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

CREATE TABLE IF NOT EXISTS project_target_roles (
    project_id UUID NOT NULL REFERENCES projects(id) ON DELETE CASCADE,
    target_role_id UUID NOT NULL REFERENCES target_roles(id) ON DELETE CASCADE,
    PRIMARY KEY (project_id, target_role_id)
);

CREATE TABLE IF NOT EXISTS project_docs (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    project_id UUID NOT NULL REFERENCES projects(id) ON DELETE CASCADE,
    title VARCHAR(255) NOT NULL,
    content TEXT NOT NULL,
    doc_type VARCHAR(50) NOT NULL DEFAULT 'other' CHECK (doc_type IN ('readme', 'spec', 'design', 'notes', 'other')),
    order_index INTEGER NOT NULL DEFAULT 0,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Create indexes for better performance
CREATE INDEX IF NOT EXISTS idx_users_email ON users(email);
CREATE INDEX IF NOT EXISTS idx_users_created_at ON users(created_at);

CREATE INDEX IF NOT EXISTS idx_user_surveys_user_id ON user_surveys(user_id);
CREATE INDEX IF NOT EXISTS idx_user_surveys_experience_level ON user_surveys(experience_level);

CREATE INDEX IF NOT EXISTS idx_mission_templates_difficulty ON mission_templates(difficulty);
CREATE INDEX IF NOT EXISTS idx_mission_templates_category ON mission_templates(category);
CREATE INDEX IF NOT EXISTS idx_mission_templates_is_generated ON mission_templates(is_generated);
CREATE INDEX IF NOT EXISTS idx_mission_templates_generated_for_user ON mission_templates(generated_for_user_id);
CREATE INDEX IF NOT EXISTS idx_mission_templates_skills ON mission_templates USING GIN(skills);
CREATE INDEX IF NOT EXISTS idx_mission_templates_industries ON mission_templates USING GIN(industries);

CREATE INDEX IF NOT EXISTS idx_user_missions_user_id ON user_missions(user_id);
CREATE INDEX IF NOT EXISTS idx_user_missions_mission_id ON user_missions(mission_id);
CREATE INDEX IF NOT EXISTS idx_user_missions_status ON user_missions(status);
CREATE INDEX IF NOT EXISTS idx_user_missions_user_status ON user_missions(user_id, status);

CREATE INDEX IF NOT EXISTS idx_company_projects_industry ON company_projects(industry);
CREATE INDEX IF NOT EXISTS idx_company_projects_difficulty ON company_projects(difficulty_level);
CREATE INDEX IF NOT EXISTS idx_company_projects_project_type ON company_projects(project_type);
CREATE INDEX IF NOT EXISTS idx_company_projects_is_active ON company_projects(is_active);
CREATE INDEX IF NOT EXISTS idx_company_projects_technologies ON company_projects USING GIN(technologies_used);

-- Existing indexes from previous migration
CREATE INDEX IF NOT EXISTS idx_projects_user_id ON projects(user_id);
CREATE INDEX IF NOT EXISTS idx_projects_mission_id ON projects(mission_id);
CREATE INDEX IF NOT EXISTS idx_projects_status ON projects(status);
CREATE INDEX IF NOT EXISTS idx_projects_created_at ON projects(created_at);

CREATE INDEX IF NOT EXISTS idx_project_docs_project_id ON project_docs(project_id);
CREATE INDEX IF NOT EXISTS idx_project_docs_doc_type ON project_docs(doc_type);
CREATE INDEX IF NOT EXISTS idx_project_docs_order_index ON project_docs(project_id, order_index);

CREATE INDEX IF NOT EXISTS idx_project_industry_tags_project_id ON project_industry_tags(project_id);
CREATE INDEX IF NOT EXISTS idx_project_industry_tags_industry_tag_id ON project_industry_tags(industry_tag_id);

CREATE INDEX IF NOT EXISTS idx_project_target_roles_project_id ON project_target_roles(project_id);
CREATE INDEX IF NOT EXISTS idx_project_target_roles_target_role_id ON project_target_roles(target_role_id);

-- Create updated_at trigger function
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ language 'plpgsql';

-- Create triggers to automatically update updated_at columns
CREATE TRIGGER update_users_updated_at 
    BEFORE UPDATE ON users 
    FOR EACH ROW 
    EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_user_surveys_updated_at 
    BEFORE UPDATE ON user_surveys 
    FOR EACH ROW 
    EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_mission_templates_updated_at 
    BEFORE UPDATE ON mission_templates 
    FOR EACH ROW 
    EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_user_missions_updated_at 
    BEFORE UPDATE ON user_missions 
    FOR EACH ROW 
    EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_company_projects_updated_at 
    BEFORE UPDATE ON company_projects 
    FOR EACH ROW 
    EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_projects_updated_at 
    BEFORE UPDATE ON projects 
    FOR EACH ROW 
    EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_project_docs_updated_at 
    BEFORE UPDATE ON project_docs 
    FOR EACH ROW 
    EXECUTE FUNCTION update_updated_at_column();

-- Insert sample company projects that can be used to generate missions
INSERT INTO company_projects (company_name, project_title, project_description, technologies_used, industry, difficulty_level, project_type, estimated_time, learning_objectives, business_context) VALUES 
    ('Netflix', 'Content Recommendation Engine', 'Build a machine learning system that analyzes user viewing history and preferences to recommend personalized content', 
     ARRAY['Python', 'TensorFlow', 'Redis', 'FastAPI', 'PostgreSQL'], 
     'Media', 'Advanced', 'Data Science', '6-8 hours',
     ARRAY['Machine Learning algorithms', 'Collaborative filtering', 'Content-based filtering', 'Real-time recommendations'],
     'Netflix uses sophisticated recommendation algorithms to keep users engaged and reduce churn by showing them content they are likely to enjoy'),
     
    ('Stripe', 'Payment Processing System', 'Create a secure payment processing system with fraud detection and multi-currency support',
     ARRAY['Node.js', 'Express', 'PostgreSQL', 'Redis', 'Docker'],
     'Finance', 'Advanced', 'Backend', '5-7 hours',
     ARRAY['Payment processing', 'Security best practices', 'Fraud detection', 'API design'],
     'Stripe processes billions of dollars in transactions and needs robust systems to handle payments securely and efficiently'),
     
    ('Airbnb', 'Property Listing Platform', 'Develop a platform for hosts to list properties with search, filtering, and booking functionality',
     ARRAY['React', 'Node.js', 'MongoDB', 'Express', 'Google Maps API'],
     'E-commerce', 'Intermediate', 'Full-Stack', '4-6 hours',
     ARRAY['Full-stack development', 'RESTful APIs', 'Database design', 'Third-party integrations'],
     'Airbnb connects millions of hosts and guests worldwide through their marketplace platform'),
     
    ('Spotify', 'Music Streaming Dashboard', 'Build a real-time analytics dashboard for music streaming data with visualizations',
     ARRAY['React', 'D3.js', 'WebSocket', 'Node.js', 'InfluxDB'],
     'Media', 'Intermediate', 'Frontend', '3-5 hours',
     ARRAY['Data visualization', 'Real-time data handling', 'Performance optimization', 'User experience design'],
     'Spotify needs to track streaming metrics in real-time to understand user behavior and optimize their platform'),
     
    ('Uber', 'Real-time Location Tracking', 'Create a system for real-time vehicle tracking and route optimization',
     ARRAY['Go', 'Redis', 'WebSocket', 'PostgreSQL', 'Docker'],
     'Technology', 'Advanced', 'Backend', '5-6 hours',
     ARRAY['Real-time systems', 'Geospatial data', 'Performance optimization', 'Microservices'],
     'Uber matches millions of riders and drivers in real-time, requiring efficient location tracking and routing systems');

-- Insert default industry tags
INSERT INTO industry_tags (name) VALUES 
    ('Technology'),
    ('Finance'),
    ('Healthcare'),
    ('E-commerce'),
    ('Media'),
    ('Education'),
    ('Gaming'),
    ('Automotive'),
    ('Retail'),
    ('Manufacturing')
ON CONFLICT (name) DO NOTHING;

-- Insert default target roles
INSERT INTO target_roles (name) VALUES 
    ('Software Engineer'),
    ('Senior Software Engineer'),
    ('Full Stack Developer'),
    ('Frontend Developer'),
    ('Backend Developer'),
    ('DevOps Engineer'),
    ('Data Scientist'),
    ('ML Engineer'),
    ('Product Manager'),
    ('Engineering Manager'),
    ('Tech Lead'),
    ('Principal Engineer')
ON CONFLICT (name) DO NOTHING;

-- Add comments for documentation
COMMENT ON TABLE users IS 'Application users who will take missions and build projects';
COMMENT ON TABLE user_surveys IS 'User survey responses used for personalizing missions';
COMMENT ON TABLE mission_templates IS 'Catalog of available missions (both manually created and AI generated)';
COMMENT ON TABLE user_missions IS 'Tracks users progress and relationship with specific missions';
COMMENT ON TABLE company_projects IS 'Real company projects used as basis for generating missions';
COMMENT ON TABLE projects IS 'User projects created from missions or custom work';
COMMENT ON TABLE industry_tags IS 'Industry categories for projects';
COMMENT ON TABLE target_roles IS 'Target job roles for projects';
COMMENT ON TABLE project_docs IS 'Documentation and files associated with projects';